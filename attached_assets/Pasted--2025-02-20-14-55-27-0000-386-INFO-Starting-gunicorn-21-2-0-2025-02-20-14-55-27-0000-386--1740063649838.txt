[2025-02-20 14:55:27 +0000] [386] [INFO] Starting gunicorn 21.2.0
[2025-02-20 14:55:27 +0000] [386] [INFO] Listening at: http://0.0.0.0:5000 (386)
[2025-02-20 14:55:27 +0000] [386] [INFO] Using worker: sync
[2025-02-20 14:55:27 +0000] [392] [INFO] Booting worker with pid: 392
[2025-02-20 14:55:27 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:27 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:27 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:27 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:27 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:28 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
[2025-02-20 14:55:29 +0000] [386] [INFO] Handling signal: winch
2025-02-20 14:55:29,890 INFO sqlalchemy.engine.Engine select pg_catalog.version()
select pg_catalog.version()
2025-02-20 14:55:29,890 INFO sqlalchemy.engine.Engine [raw sql] {}
[raw sql] {}
2025-02-20 14:55:29,960 INFO sqlalchemy.engine.Engine select current_schema()
select current_schema()
2025-02-20 14:55:29,960 INFO sqlalchemy.engine.Engine [raw sql] {}
[raw sql] {}
2025-02-20 14:55:30,029 INFO sqlalchemy.engine.Engine show standard_conforming_strings
show standard_conforming_strings
2025-02-20 14:55:30,029 INFO sqlalchemy.engine.Engine [raw sql] {}
[raw sql] {}
Registering admin blueprint...
Admin blueprint registered
All registered routes:
Map([<Rule '/<filename>' (OPTIONS, GET, HEAD) -> static>,
 <Rule '/' (OPTIONS, GET, HEAD) -> main.index>,
 <Rule '/about' (OPTIONS, GET, HEAD) -> main.about>,
 <Rule '/profile/<slug>' (OPTIONS, GET, HEAD) -> main.view_profile>,
 <Rule '/privacy-policy' (OPTIONS, GET, HEAD) -> main.privacy_policy>,
 <Rule '/terms-and-conditions' (OPTIONS, GET, HEAD) -> main.terms_and_conditions>,
 <Rule '/sitemap.xml' (OPTIONS, GET, HEAD) -> main.sitemap>,
 <Rule '/test-sitemap' (OPTIONS, GET, HEAD) -> main.test_sitemap>,
 <Rule '/robots.txt' (OPTIONS, GET, HEAD) -> main.robots>,
 <Rule '/test-robots' (OPTIONS, GET, HEAD) -> main.test_robots>,
 <Rule '/auth/register' (OPTIONS, POST, GET, HEAD) -> auth.register>,
 <Rule '/auth/login' (OPTIONS, POST, GET, HEAD) -> auth.login>,
 <Rule '/auth/dashboard' (OPTIONS, GET, HEAD) -> auth.dashboard>,
 <Rule '/auth/logout' (OPTIONS, GET, HEAD) -> auth.logout>,
 <Rule '/auth/password-reset' (OPTIONS, POST, GET, HEAD) -> auth.password_reset_request>,
 <Rule '/auth/password-reset/<token>' (OPTIONS, POST, GET, HEAD) -> auth.password_reset>,
 <Rule '/profiles/get-image/<filename>' (OPTIONS, GET, HEAD) -> profiles.get_image>,
 <Rule '/profiles/profile/select' (OPTIONS, GET, HEAD) -> profiles.select_profile_type>,
 <Rule '/profiles/profile/individual/new' (OPTIONS, POST, GET, HEAD) -> profiles.create_individual_profile>,
 <Rule '/profiles/profile/company/new' (OPTIONS, POST, GET, HEAD) -> profiles.create_company_profile>,
 <Rule '/profiles/profile/individual/<username>/edit' (OPTIONS, POST, GET, HEAD) -> profiles.edit_individual_profile>,
 <Rule '/profiles/profile/company/<company_name>/edit' (OPTIONS, POST, GET, HEAD) -> profiles.edit_company_profile>,
 <Rule '/profiles/profile/individual/<username>' (OPTIONS, GET, HEAD) -> profiles.view_individual_profile>,
 <Rule '/profiles/profile/company/<company_name>' (OPTIONS, GET, HEAD) -> profiles.view_company_profile>,
 <Rule '/profiles/profile/<username>' (OPTIONS, GET, HEAD) -> profiles.view_profile>,
 <Rule '/discussions/create' (OPTIONS, POST, GET, HEAD) -> discussions.create_discussion>,
 <Rule '/discussions/<discussion_id>/<slug>' (OPTIONS, GET, HEAD) -> discussions.view_discussion>,
 <Rule '/discussions/search' (OPTIONS, GET, HEAD) -> discussions.search_discussions>,
 <Rule '/discussions/api/search' (OPTIONS, GET, HEAD) -> discussions.api_search_discussions>,
 <Rule '/discussions/api/cities/<country_code>' (OPTIONS, GET, HEAD) -> discussions.get_cities_by_country>,
 <Rule '/settings/settings' (OPTIONS, POST, GET, HEAD) -> settings.view_settings>,
 <Rule '/settings/change-password' (OPTIONS, POST) -> settings.change_password>,
 <Rule '/settings/delete-account' (OPTIONS, POST) -> settings.delete_account>,
 <Rule '/help/' (OPTIONS, GET, HEAD) -> help.help>,
 <Rule '/help/getting-started' (OPTIONS, GET, HEAD) -> help.getting_started>,
 <Rule '/help/creating-discussions' (OPTIONS, GET, HEAD) -> help.creating_discussions>,
 <Rule '/help/managing-discussions' (OPTIONS, GET, HEAD) -> help.managing_discussions>,
 <Rule '/help/seed-comments' (OPTIONS, GET, HEAD) -> help.seed_comments>,
 <Rule '/help/polis-algorithms' (OPTIONS, GET, HEAD) -> help.polis_algorithms>,
 <Rule '/admin/dashboard' (OPTIONS, GET, HEAD) -> admin.dashboard>,
 <Rule '/admin/profiles' (OPTIONS, GET, HEAD) -> admin.list_profiles>,
 <Rule '/admin/profiles/individual/create' (OPTIONS, POST, GET, HEAD) -> admin.create_individual_profile>,
 <Rule '/admin/profiles/individual/<profile_id>/edit' (OPTIONS, POST, GET, HEAD) -> admin.edit_individual_profile>,
 <Rule '/admin/profiles/company/create' (OPTIONS, POST, GET, HEAD) -> admin.create_company_profile>,
 <Rule '/admin/profiles/company/<profile_id>/edit' (OPTIONS, POST, GET, HEAD) -> admin.edit_company_profile>,
 <Rule '/admin/profiles/<profile_type>/<profile_id>/delete' (OPTIONS, POST) -> admin.delete_profile>])
2025-02-20 14:55:31,873 INFO sqlalchemy.engine.Engine BEGIN (implicit)
BEGIN (implicit)
2025-02-20 14:55:31,877 INFO sqlalchemy.engine.Engine SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE discussion.is_featured = true ORDER BY discussion.created_at DESC
SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE discussion.is_featured = true ORDER BY discussion.created_at DESC
2025-02-20 14:55:31,877 INFO sqlalchemy.engine.Engine [generated in 0.00024s] {}
[generated in 0.00024s] {}
2025-02-20 14:55:31,949 INFO sqlalchemy.engine.Engine SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE (discussion.id NOT IN (%(id_1_1)s)) ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s
SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE (discussion.id NOT IN (%(id_1_1)s)) ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s
2025-02-20 14:55:31,950 INFO sqlalchemy.engine.Engine [generated in 0.00032s] {'param_1': 5, 'id_1_1': 1}
[generated in 0.00032s] {'param_1': 5, 'id_1_1': 1}
2025-02-20 14:55:31,987 INFO sqlalchemy.engine.Engine SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-02-20 14:55:31,987 INFO sqlalchemy.engine.Engine [generated in 0.00024s] {'param_1': 9, 'param_2': 0}
[generated in 0.00024s] {'param_1': 9, 'param_2': 0}
2025-02-20 14:55:32,028 INFO sqlalchemy.engine.Engine SELECT count(*) AS count_1 
FROM (SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion) AS anon_1
SELECT count(*) AS count_1 
FROM (SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion) AS anon_1
2025-02-20 14:55:32,028 INFO sqlalchemy.engine.Engine [generated in 0.00021s] {}
[generated in 0.00021s] {}
2025-02-20 14:55:32,128 INFO sqlalchemy.engine.Engine ROLLBACK
ROLLBACK
2025-02-20 14:56:34,052 INFO sqlalchemy.engine.Engine BEGIN (implicit)
BEGIN (implicit)
2025-02-20 14:56:34,053 INFO sqlalchemy.engine.Engine SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE discussion.is_featured = true ORDER BY discussion.created_at DESC
SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE discussion.is_featured = true ORDER BY discussion.created_at DESC
2025-02-20 14:56:34,053 INFO sqlalchemy.engine.Engine [cached since 62.18s ago] {}
[cached since 62.18s ago] {}
2025-02-20 14:56:34,122 INFO sqlalchemy.engine.Engine SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE (discussion.id NOT IN (%(id_1_1)s)) ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s
SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion 
WHERE (discussion.id NOT IN (%(id_1_1)s)) ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s
2025-02-20 14:56:34,123 INFO sqlalchemy.engine.Engine [cached since 62.17s ago] {'param_1': 5, 'id_1_1': 1}
[cached since 62.17s ago] {'param_1': 5, 'id_1_1': 1}
2025-02-20 14:56:34,158 INFO sqlalchemy.engine.Engine SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion ORDER BY discussion.created_at DESC 
 LIMIT %(param_1)s OFFSET %(param_2)s
2025-02-20 14:56:34,158 INFO sqlalchemy.engine.Engine [cached since 62.17s ago] {'param_1': 9, 'param_2': 0}
[cached since 62.17s ago] {'param_1': 9, 'param_2': 0}
2025-02-20 14:56:34,193 INFO sqlalchemy.engine.Engine SELECT count(*) AS count_1 
FROM (SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion) AS anon_1
SELECT count(*) AS count_1 
FROM (SELECT discussion.id AS discussion_id, discussion.embed_code AS discussion_embed_code, discussion.title AS discussion_title, discussion.description AS discussion_description, discussion.keywords AS discussion_keywords, discussion.slug AS discussion_slug, discussion.geographic_scope AS discussion_geographic_scope, discussion.country AS discussion_country, discussion.city AS discussion_city, discussion.creator_id AS discussion_creator_id, discussion.topic AS discussion_topic, discussion.is_featured AS discussion_is_featured, discussion.participant_count AS discussion_participant_count, discussion.created_at AS discussion_created_at, discussion.updated_at AS discussion_updated_at, discussion.individual_profile_id AS discussion_individual_profile_id, discussion.company_profile_id AS discussion_company_profile_id 
FROM discussion) AS anon_1
2025-02-20 14:56:34,194 INFO sqlalchemy.engine.Engine [cached since 62.17s ago] {}
[cached since 62.17s ago] {}
2025-02-20 14:56:34,230 INFO sqlalchemy.engine.Engine ROLLBACK
ROLLBACK
[2025-02-20 14:56:36,119] WARNING in __init__: 404 Page Not Found: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
404 Page Not Found: 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
2025-02-20 14:57:06,617 INFO sqlalchemy.engine.Engine BEGIN (implicit)
BEGIN (implicit)
2025-02-20 14:57:06,618 INFO sqlalchemy.engine.Engine SELECT "user".id AS user_id, "user".username AS user_username, "user".email AS user_email, "user".password AS user_password, "user".is_admin AS user_is_admin, "user".created_at AS user_created_at, "user".profile_type AS user_profile_type 
FROM "user" 
WHERE "user".email = %(email_1)s 
 LIMIT %(param_1)s
SELECT "user".id AS user_id, "user".username AS user_username, "user".email AS user_email, "user".password AS user_password, "user".is_admin AS user_is_admin, "user".created_at AS user_created_at, "user".profile_type AS user_profile_type 
FROM "user" 
WHERE "user".email = %(email_1)s 
 LIMIT %(param_1)s
2025-02-20 14:57:06,619 INFO sqlalchemy.engine.Engine [generated in 0.00017s] {'email_1': 'williamjlroberts+1@gmail.com', 'param_1': 1}
[generated in 0.00017s] {'email_1': 'williamjlroberts+1@gmail.com', 'param_1': 1}
2025-02-20 14:57:06,908 INFO sqlalchemy.engine.Engine INSERT INTO "user" (username, email, password, is_admin, created_at, profile_type) VALUES (%(username)s, %(email)s, %(password)s, %(is_admin)s, %(created_at)s, %(profile_type)s) RETURNING "user".id
INSERT INTO "user" (username, email, password, is_admin, created_at, profile_type) VALUES (%(username)s, %(email)s, %(password)s, %(is_admin)s, %(created_at)s, %(profile_type)s) RETURNING "user".id
2025-02-20 14:57:06,908 INFO sqlalchemy.engine.Engine [generated in 0.00033s] {'username': 'willtest', 'email': 'williamjlroberts+1@gmail.com', 'password': 'pbkdf2:sha256:600000$1l9WlpbnkqOlB0zW$207de0ee2ded1ee99ca9e7f634e1dad1e9038ff97afb5fce1d5a5f4ea607c8a4', 'is_admin': False, 'created_at': datetime.datetime(2025, 2, 20, 14, 57, 6, 907987), 'profile_type': None}
[generated in 0.00033s] {'username': 'willtest', 'email': 'williamjlroberts+1@gmail.com', 'password': 'pbkdf2:sha256:600000$1l9WlpbnkqOlB0zW$207de0ee2ded1ee99ca9e7f634e1dad1e9038ff97afb5fce1d5a5f4ea607c8a4', 'is_admin': False, 'created_at': datetime.datetime(2025, 2, 20, 14, 57, 6, 907987), 'profile_type': None}
2025-02-20 14:57:06,944 INFO sqlalchemy.engine.Engine COMMIT
COMMIT
2025-02-20 14:57:07,015 INFO sqlalchemy.engine.Engine BEGIN (implicit)
BEGIN (implicit)
2025-02-20 14:57:07,016 INFO sqlalchemy.engine.Engine SELECT "user".id AS user_id, "user".username AS user_username, "user".email AS user_email, "user".password AS user_password, "user".is_admin AS user_is_admin, "user".created_at AS user_created_at, "user".profile_type AS user_profile_type 
FROM "user" 
WHERE "user".id = %(pk_1)s
SELECT "user".id AS user_id, "user".username AS user_username, "user".email AS user_email, "user".password AS user_password, "user".is_admin AS user_is_admin, "user".created_at AS user_created_at, "user".profile_type AS user_profile_type 
FROM "user" 
WHERE "user".id = %(pk_1)s
2025-02-20 14:57:07,016 INFO sqlalchemy.engine.Engine [generated in 0.00015s] {'pk_1': 3767}
[generated in 0.00015s] {'pk_1': 3767}
[2025-02-20 14:57:07,088] ERROR in __init__: Unhandled Exception: Could not build url for endpoint 'auth.verify_email' with values ['token']. Did you mean 'auth.register' instead?
Traceback (most recent call last):
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 867, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 852, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py", line 1303, in __inner
    return cast(R, flask.current_app.ensure_sync(obj)(*a, **k))
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/app/auth/routes.py", line 53, in register
    verification_url = url_for('auth.verify_email', token=token, _external=True)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/helpers.py", line 222, in url_for
    return current_app.url_for(
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 1071, in url_for
    return self.handle_url_build_error(error, endpoint, values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 1060, in url_for
    rv = url_adapter.build(  # type: ignore[union-attr]
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/werkzeug/routing/map.py", line 919, in build
    raise BuildError(endpoint, values, method, self)
werkzeug.routing.exceptions.BuildError: Could not build url for endpoint 'auth.verify_email' with values ['token']. Did you mean 'auth.register' instead?
Unhandled Exception: Could not build url for endpoint 'auth.verify_email' with values ['token']. Did you mean 'auth.register' instead?
Traceback (most recent call last):
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 867, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 852, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask_limiter/extension.py", line 1303, in __inner
    return cast(R, flask.current_app.ensure_sync(obj)(*a, **k))
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/app/auth/routes.py", line 53, in register
    verification_url = url_for('auth.verify_email', token=token, _external=True)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/helpers.py", line 222, in url_for
    return current_app.url_for(
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 1071, in url_for
    return self.handle_url_build_error(error, endpoint, values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/flask/app.py", line 1060, in url_for
    rv = url_adapter.build(  # type: ignore[union-attr]
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/workspace/.pythonlibs/lib/python3.11/site-packages/werkzeug/routing/map.py", line 919, in build
    raise BuildError(endpoint, values, method, self)
werkzeug.routing.exceptions.BuildError: Could not build url for endpoint 'auth.verify_email' with values ['token']. Did you mean 'auth.register' instead?
2025-02-20 14:57:07,094 INFO sqlalchemy.engine.Engine ROLLBACK
ROLLBACK